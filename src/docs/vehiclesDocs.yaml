/vehicles:
  get:
    tags: [Vehicles]
    summary: List all vehicles with filters and pagination
    description: Returns a paginated list of vehicles with optional filtering and sorting
    parameters:
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/limit'
      - in: query
        name: search
        schema:
          type: string
        description: Search term to filter vehicles
      - in: query
        name: status
        schema:
          type: string
          enum: [ACTIVE, INACTIVE, MAINTENANCE, DECOMMISSIONED]
        description: Filter by vehicle status
      - in: query
        name: emissionStatus
        schema:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
        description: Filter by emission status
      - in: query
        name: vehicleType
        schema:
          type: string
          enum: [CAR, TRUCK, BUS, MOTORCYCLE, OTHER]
        description: Filter by vehicle type
      - in: query
        name: userId
        schema:
          type: integer
        description: Filter by user ID (admin/fleet manager only)
      - $ref: '#/components/parameters/sortBy'
      - $ref: '#/components/parameters/sortOrder'
    responses:
      200:
        description: Successful operation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaginatedVehicleResponse'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      500:
        $ref: '#/components/responses/ServerError'

  post:
    tags: [Vehicles]
    summary: Create a new vehicle
    description: Create a new vehicle record (admin/fleet manager only)
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VehicleCreateRequest'
    responses:
      201:
        description: Vehicle created successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleFullDetails'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      409:
        $ref: '#/components/responses/Conflict'
      422:
        $ref: '#/components/responses/ValidationError'
      500:
        $ref: '#/components/responses/ServerError'

/vehicles/{id}:
  get:
    tags: [Vehicles]
    summary: Get full vehicle details by ID
    description: Returns complete details for a specific vehicle
    parameters:
      - $ref: '#/components/parameters/vehicleId'
    responses:
      200:
        description: Successful operation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleFullDetails'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      404:
        $ref: '#/components/responses/NotFound'
      500:
        $ref: '#/components/responses/ServerError'

  put:
    tags: [Vehicles]
    summary: Update vehicle by ID
    description: Update all fields of a vehicle (admin/fleet manager only)
    parameters:
      - $ref: '#/components/parameters/vehicleId'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VehicleUpdateRequest'
    responses:
      200:
        description: Vehicle updated successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleFullDetails'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      404:
        $ref: '#/components/responses/NotFound'
      422:
        $ref: '#/components/responses/ValidationError'
      500:
        $ref: '#/components/responses/ServerError'

  delete:
    tags: [Vehicles]
    summary: Permanently delete a vehicle by ID
    description: Hard delete a vehicle record (admin only)
    parameters:
      - $ref: '#/components/parameters/vehicleId'
    responses:
      200:
        description: Vehicle permanently deleted
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuccessResponse'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      404:
        $ref: '#/components/responses/NotFound'
      500:
        $ref: '#/components/responses/ServerError'

/vehicles/{id}/soft-delete:
  patch:
    tags: [Vehicles]
    summary: Soft delete a vehicle
    description: Mark a vehicle as deleted without removing from database (admin/fleet manager only)
    parameters:
      - $ref: '#/components/parameters/vehicleId'
    responses:
      200:
        description: Vehicle soft deleted
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuccessResponse'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      404:
        $ref: '#/components/responses/NotFound'
      500:
        $ref: '#/components/responses/ServerError'

/vehicles/{id}/restore:
  patch:
    tags: [Vehicles]
    summary: Restore a soft-deleted vehicle
    description: Restore a previously soft-deleted vehicle (admin/fleet manager only)
    parameters:
      - $ref: '#/components/parameters/vehicleId'
    responses:
      200:
        description: Vehicle restored
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuccessResponse'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      404:
        $ref: '#/components/responses/NotFound'
      500:
        $ref: '#/components/responses/ServerError'

/vehicles/{id}/assign/{userId}:
  patch:
    tags: [Vehicles]
    summary: Assign vehicle to user
    description: Assign a vehicle to a specific user (admin/fleet manager only)
    parameters:
      - $ref: '#/components/parameters/vehicleId'
      - in: path
        name: userId
        required: true
        schema:
          type: integer
        description: ID of user to assign vehicle to
    responses:
      200:
        description: Vehicle assigned successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuccessResponse'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      404:
        $ref: '#/components/responses/NotFound'
      409:
        $ref: '#/components/responses/Conflict'
      500:
        $ref: '#/components/responses/ServerError'

/vehicles/user/{userId}:
  get:
    tags: [Vehicles]
    summary: Get vehicles by user ID
    description: Returns all vehicles assigned to a specific user
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: integer
        description: ID of user to get vehicles for
    responses:
      200:
        description: Successful operation
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/VehicleListItem'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      404:
        $ref: '#/components/responses/NotFound'
      500:
        $ref: '#/components/responses/ServerError'

/vehicles/analytics/top-polluters:
  get:
    tags: [Vehicles]
    summary: Get top polluting vehicles
    description: Returns vehicles with highest emission levels
    parameters:
      - in: query
        name: limit
        schema:
          type: integer
          default: 5
          minimum: 1
          maximum: 50
        description: Number of top polluters to return
    responses:
      200:
        description: Successful operation
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/VehicleEmissionItem'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      500:
        $ref: '#/components/responses/ServerError'

/vehicles/analytics/count:
  get:
    tags: [Vehicles]
    summary: Count total number of vehicles
    description: Returns total count of active vehicles
    responses:
      200:
        description: Successful operation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountResponse'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      500:
        $ref: '#/components/responses/ServerError'

/vehicles/analytics/count/{status}:
  get:
    tags: [Vehicles]
    summary: Count vehicles by status
    description: Returns count of vehicles filtered by status
    parameters:
      - in: path
        name: status
        required: true
        schema:
          type: string
          enum: [ACTIVE, INACTIVE, MAINTENANCE, DECOMMISSIONED]
        description: Vehicle status to filter by
    responses:
      200:
        description: Successful operation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountResponse'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      500:
        $ref: '#/components/responses/ServerError'